name: Main workflow

on:
  push:
    branches:
      - VGD_serv
#      - develop_1

jobs:
  tests:
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.12

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8
        pip install -r ./backend/requirements.txt

#    - name: Test with flake8 and django tests
#      run: |
#        python -m flake8 backend/

#####################################   BACKEND   ####################################

#  build_and_push_to_docker_hub:
#    name: Push Docker image to DockerHub
#    runs-on: ubuntu-latest
#    needs: tests
#    steps:
#      - name: Check out the repo
#        uses: actions/checkout@v3
#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v2
#      - name: Login to Docker
#        uses: docker/login-action@v2
#        with:
#          username: ${{ secrets.DOCKER_USERNAME }}
#          password: ${{ secrets.DOCKER_PASSWORD }}
#      - name: Push to DockerHub
#        uses: docker/build-push-action@v4
#        with:
#          context: ./backend
#          push: true
#          tags: ${{ secrets.DOCKER_USERNAME }}/ros_bank_backend:latest

  frontend_tests:
    runs-on: ubuntu-latest

    steps:
      # Checkout frontend repository
      - name: Checkout frontend repository
        run: git clone https://github.com/hackathon-Rosbank/rosbank-frontend.git frontend

      # Output current directory contents for debugging
      - name: List directory contents after clone
        run: cd frontend && ls -al

      # Set up Node.js for frontend
      - name: Set up Node.js for frontend
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      # Install frontend dependencies
      - name: Install frontend dependencies
        run: npm ci
        working-directory: frontend

      # Build frontend
      - name: Build frontend
        run: npm run build
        working-directory: frontend

      - name: list directory contents after build
        run: cd frontend && ls -al

        # Copy frontend build to backend public directory
      - name: Copy frontend build to backend
        run: |
          mkdir -p ./backend/public
          cp -r ./dist/* ./backend/public/
        working-directory: frontend

  build_frontend_and_push_to_docker_hub:
    name: Push frontend Docker image to DockerHub
    runs-on: ubuntu-latest
    needs: frontend_tests
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: List contents
        run: ls -la
      - name: Push to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: frontend
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/ros_bank_frontend:latest

#  deploy:
#    runs-on: ubuntu-latest
#    needs:
##      - build_and_push_to_docker_hub
##      - build_frontend_and_push_to_docker_hub
#    steps:
#      - name: Executing remote ssh commands to deploy
#        uses: appleboy/ssh-action@master
#        with:
#          host: ${{ secrets.HOST }}
#          username: ${{ secrets.USER }}
#          key: ${{ secrets.SSH_KEY }}
#          passphrase: ${{ secrets.SSH_PASSPHRASE }}
#          script: |
#            sudo docker compose stop
#            sudo docker compose rm -f backend
#            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/ros_bank_backend:latest
#
#            sudo docker compose up -d --build
#            sudo docker compose exec backend python3 manage.py makemigrations
#            sudo docker compose exec backend python3 manage.py migrate
#            sudo docker compose exec backend python3 manage.py collectstatic --no-input
          

#  send_message:
#    name: Telegram
#    runs-on: ubuntu-latest
#    needs: deploy
#    steps:
#    - name: Send message
#      uses: appleboy/telegram-action@master
#      with:
#        to: ${{ secrets.TELEGRAM_TO }}
#        token: ${{ secrets.TELEGRAM_TOKEN }}
#        message: Деплой проекта Foodgram успешно выполнен!
